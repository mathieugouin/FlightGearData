<?xml version="1.0"?>

<!--
************************************************************************
* Bindings for Logitech Extreme Digital 3D Pro joystick.
*
*
* Axis 0: ailerons
* Axis 1: elevator
* Axis 2 (twist): rudder
* Axis 3 (slider): throttle
* Axes 4 and 5 (hat): view direction
*
************************************************************************
$Id$
-->

<PropertyList>

  <name>Logitech Logitech Extreme 3D Pro</name>
  <name>Logitech Extreme 3D Pro</name>
  <name>Logitech Extreme 3D Pro USB</name>
  <name>Logitech  Extreme  3D  Pro USB</name>
  <name>Logitech Extreme 3D</name>
  <name>Logitech Logitech Extreme 3D</name>

  <!-- Initial nasal declarations -->
  <nasal>
    <script>
    <![CDATA[
      # Set parking brakes by default at startup so the plane does not start moving around the runway.
      # setprop("/controls/gear/brake-parking", 1);

      # Global variable for the motion & zoom
      JsViewZoomVariation = 25;

      # Pitch & Heading are slewed by a factor of the field-of-view.
      # This allow for easier adjustment at high zoom (small FOV).
      #
      # "Calibration": At FOV=73, 35 pitch & heading slew.
      GetViewSlewRate = func
      {
        return getprop("/sim/current-view/field-of-view") * 35.0 / 73.0;
      }

      # Utility function to clamp value.  Is this available elsewhere?
      CapValueMinMax = func(prop, min, max)
      {
        var v = getprop(prop);
        setprop(prop, math.clamp(v, min, max));
        return getprop(prop); # must read again because of clamping
      }

      # Global variable for the joystick button key hold
      JsKeyPressed = 0;

      # Set to no modifier key pressed initially.
      JsKeyModifier1 = 0;
      JsKeyModifier2 = 0;

      # Function to get the value of the modifier.
      # It is the binary value for the modifier 1 and modifier 2 keys combined.
      # The output value is 0, 1, 2 or 3.
      #     0: No button pressed
      #     1: With button labeled "11" pressed
      #     2: With button labeled "12" pressed
      #     3: With both button pressed
      #
      # NOTE: The description of the buttons are given in this order:
      #  - No modifier button pressed;
      #  - With button labeled "11" pressed;
      #  - With button labeled "12" pressed;
      #  - With both button pressed
      #
      GetAttack3Mod = func
      {
        var mod1 = JsKeyModifier1;
        var mod2 = JsKeyModifier2;

        var mod = mod1 + (2 * mod2);
        return mod;
      }
    ]]>
    </script>
  </nasal>

  <!-- Left-Right axis -->
  <axis n="0">
    <desc>Aileron</desc>
    <dead-band type="double">0.0</dead-band>
    <binding>
      <command>property-scale</command>
      <property>/controls/flight/aileron</property>
      <offset type="double">0.0</offset>
      <factor type="double">0.6</factor>
      <power type="double">2.0</power>
    </binding>
  </axis>

  <!-- Up-Down axis -->
  <axis n="1">
    <desc>Elevator</desc>
    <dead-band type="double">0.0</dead-band>
    <binding>
      <command>property-scale</command>
      <property>/controls/flight/elevator</property>
      <offset type="double">0.0</offset>
      <factor type="double">-0.6</factor>
      <power type="double">2.0</power>
    </binding>
  </axis>

  <!-- Twist axis -->
  <axis>
    <desc>Rudder</desc>
    <number>
      <unix>2</unix>
      <windows>3</windows>
      <mac>2</mac>
    </number>
    <dead-band type="double">0.07</dead-band>
    <binding>
      <command>property-scale</command>
      <property>/controls/flight/rudder</property>
      <offset type="double">0.0</offset>
      <factor type="double">1.0</factor>
      <power type="double">2.0</power>
    </binding>
  </axis>

  <!-- Throttle axis -->
  <axis>
    <desc>Throttle</desc>
    <number>
      <unix>3</unix>
      <windows>2</windows>
      <mac>3</mac>
    </number>
    <binding>
      <command>nasal</command>
      <script>controls.throttleAxis()</script>
    </binding>
  </axis>

  <!-- Hat Horizontal -->
  <axis>
    <desc>View Heading</desc>
    <number>
      <unix>4</unix>
      <windows>6</windows>
      <mac>4</mac>
    </number>
    <low>
      <repeatable>true</repeatable>
      <binding>
        <command>nasal</command>
        <script>
        <![CDATA[
          controls.slewProp("/sim/current-view/heading-offset-deg", GetViewSlewRate());
        ]]>
        </script>
      </binding>
    </low>
    <high>
      <repeatable>true</repeatable>
      <binding>
        <command>nasal</command>
        <script>
        <![CDATA[
          controls.slewProp("/sim/current-view/heading-offset-deg", -GetViewSlewRate());
        ]]>
        </script>
      </binding>
    </high>
  </axis>

  <!-- Hat Vertical -->
  <axis>
    <desc>View Pitch</desc>
    <number>
      <unix>5</unix>
      <windows>7</windows>
      <mac>5</mac>
    </number>
    <low>
      <repeatable>true</repeatable>
      <binding>
        <command>nasal</command>
        <script>
        <![CDATA[
          controls.slewProp("/sim/current-view/pitch-offset-deg", GetViewSlewRate());
        ]]>
        </script>
      </binding>
    </low>
    <high>
      <repeatable>true</repeatable>
      <binding>
        <command>nasal</command>
        <script>
        <![CDATA[
          controls.slewProp("/sim/current-view/pitch-offset-deg", -GetViewSlewRate());
        ]]>
        </script>
      </binding>
    </high>
  </axis>

  <!-- Button labeled "11", used as a 'Modifier 1' button. -->
  <button n="10">
    <desc>Modifier 1</desc>
    <repeatable type="bool">false</repeatable>
    <binding>
      <command>nasal</command>
      <script>
      <![CDATA[
        JsKeyModifier1 = 1;
      ]]>
      </script>
    </binding>
    <mod-up>
      <binding>
        <command>nasal</command>
        <script>
        <![CDATA[
          JsKeyModifier1 = 0;
        ]]>
        </script>
      </binding>
    </mod-up>
  </button>

  <!-- Button labeled "12", used as a 'Modifier 2' button. -->
  <button n="11">
    <desc>Modifier 2</desc>
    <repeatable type="bool">false</repeatable>
    <binding>
      <command>nasal</command>
      <script>
      <![CDATA[
        JsKeyModifier2 = 1;
      ]]>
      </script>
    </binding>
    <mod-up>
      <binding>
        <command>nasal</command>
        <script>
        <![CDATA[
          JsKeyModifier2 = 0;
        ]]>
        </script>
      </binding>
    </mod-up>
  </button>

  <!-- Trigger a.k.a. Button "1" -->
  <button n="0">
    <desc>Brakes; Toggle parking brakes; Toggle landing gear; None</desc>
    <repeatable type="bool">false</repeatable>
    <binding>
      <command>nasal</command>
      <script>
      <![CDATA[
        var mod = GetAttack3Mod();
        if (mod == 0)
        {
          controls.applyBrakes(1);
        }
        elsif (mod == 1)
        {
          # For some strange reason, parking brake is applied in the mod-up (see below...)
        }
        elsif (mod == 2)
        {
          controls.gearToggle();
        }
        elsif (mod == 3)
        {
        }
        JsKeyPressed = 1;
      ]]>
      </script>
    </binding>
    <mod-up>
      <binding>
        <command>nasal</command>
        <script>
        <![CDATA[
          JsKeyPressed = 0;
          var mod = GetAttack3Mod();
          if (mod == 0)
          {
            controls.applyBrakes(0);
          }
          elsif (mod == 1)
          {
            controls.applyParkingBrake(1);
          }
          elsif (mod == 2)
          {
          }
          elsif (mod == 3)
          {
          }
        ]]>
        </script>
      </binding>
    </mod-up>
  </button>

  <!-- Button labeled "2" -->
  <button n="1">
    <desc>Center view and Default zoom</desc>
    <repeatable>true</repeatable>
    <binding>
      <command>nasal</command>
      <script>
      <![CDATA[
        var mod = GetAttack3Mod();
        if (mod == 0)
        {
          # 1280 x 1024
          setprop("/sim/current-view/field-of-view", 73);

          # TV Screen with widescreen zoom (16:9)
          # setprop("/sim/current-view/field-of-view", 76);

          # Center View
          setprop("/sim/current-view/pitch-offset-deg", -12);
          setprop("/sim/current-view/heading-offset-deg", 0);
        }
        elsif (mod == 1)
        {
        }
        elsif (mod == 2)
        {
        }
        elsif (mod == 3)
        {
        }
        JsKeyPressed = 1;
      ]]>
      </script>
    </binding>
    <mod-up>
      <binding>
        <command>nasal</command>
        <script>
        <![CDATA[
          JsKeyPressed = 0;
        ]]>
        </script>
      </binding>
    </mod-up>
  </button>

  <!-- Button labeled "5" -->
  <button n="4">
    <desc>Elevator trim up</desc>
    <repeatable type="bool">true</repeatable>
    <binding>
      <command>nasal</command>
      <script>
      <![CDATA[
        var mod = GetAttack3Mod();
        if (mod == 0)
        {
          controls.elevatorTrim(0.75);
        }
        elsif (mod == 1)
        {
        }
        elsif (mod == 2)
        {
        }
        elsif (mod == 3)
        {
        }
        JsKeyPressed = 1;
      ]]>
      </script>
    </binding>
    <mod-up>
      <binding>
        <command>nasal</command>
        <script>
        <![CDATA[
          JsKeyPressed = 0;
        ]]>
        </script>
      </binding>
    </mod-up>
  </button>

  <!-- Button labeled "3" -->
  <button n="2">
    <desc>Elevator trim down</desc>
    <repeatable type="bool">true</repeatable>
    <binding>
      <command>nasal</command>
      <script>
      <![CDATA[
        var mod = GetAttack3Mod();
        if (mod == 0)
        {
          controls.elevatorTrim(-0.75);
        }
        elsif (mod == 1)
        {
        }
        elsif (mod == 2)
        {
        }
        elsif (mod == 3)
        {
        }
        JsKeyPressed = 1;
      ]]>
      </script>
    </binding>
    <mod-up>
      <binding>
        <command>nasal</command>
        <script>
        <![CDATA[
          JsKeyPressed = 0;
        ]]>
        </script>
      </binding>
    </mod-up>
  </button>

  <!-- Button labeled "6" -->
  <button n="5">
    <desc>Flaps up; Mixture richer; Propeller higher RPM (finer); Retract Spoiler</desc>
    <repeatable>true</repeatable>
    <binding>
      <command>nasal</command>
      <script>
      <![CDATA[
        var mod = GetAttack3Mod();
        if (mod == 0)
        {
          if (JsKeyPressed == 0)
          {
            controls.flapsDown(-1)
          }
        }
        elsif (mod == 1)
        {
          controls.adjMixture(0.25);
        }
        elsif (mod == 2)
        {
          controls.adjPropeller(0.25);
        }
        elsif (mod == 3)
        {
          if (JsKeyPressed == 0)
          {
            controls.stepSpoilers(-1);
          }
        }
        JsKeyPressed = 1;
      ]]>
      </script>
    </binding>
    <mod-up>
      <binding>
        <command>nasal</command>
        <script>
        <![CDATA[
          JsKeyPressed = 0;
          controls.stepSpoilers(0);
        ]]>
        </script>
      </binding>
    </mod-up>
  </button>

  <!-- Button labeled "4" -->
  <button n="3">
    <desc>Flaps down; Mixture leaner; Propeller lower RPM (coarser); Deploy Spoiler</desc>
    <repeatable>true</repeatable>
    <binding>
      <command>nasal</command>
      <script>
      <![CDATA[
        var mod = GetAttack3Mod();
        if (mod == 0)
        {
          if (JsKeyPressed == 0)
          {
            controls.flapsDown(1)
          }
        }
        elsif (mod == 1)
        {
          controls.adjMixture(-0.25);
        }
        elsif (mod == 2)
        {
          controls.adjPropeller(-0.25);
        }
        elsif (mod == 3)
        {
          if (JsKeyPressed == 0)
          {
            controls.stepSpoilers(1);
          }
        }
        JsKeyPressed = 1;
      ]]>
      </script>
    </binding>
    <mod-up>
      <binding>
        <command>nasal</command>
        <script>
        <![CDATA[
          JsKeyPressed = 0;
          controls.stepSpoilers(0);
        ]]>
        </script>
      </binding>
    </mod-up>
  </button>

  <!-- Button labeled "7" -->
  <button n="6">
    <desc>Zoom out</desc>
    <repeatable>true</repeatable>
    <binding>
      <command>nasal</command>
      <script>
      <![CDATA[
        var mod = GetAttack3Mod();
        if (mod == 0)
        {
          controls.slewProp("/sim/current-view/field-of-view", JsViewZoomVariation);
          CapValueMinMax("/sim/current-view/field-of-view", 1.0, 150.0);
        }
        elsif (mod == 1)
        {
        }
        elsif (mod == 2)
        {
        }
        elsif (mod == 3)
        {
        }
        JsKeyPressed = 1;
      ]]>
      </script>
    </binding>
    <mod-up>
      <binding>
        <command>nasal</command>
        <script>
        <![CDATA[
          JsKeyPressed = 0;
        ]]>
        </script>
      </binding>
    </mod-up>
  </button>

  <!-- Button labeled "8" -->
  <button n="7">
    <desc>Zoom in</desc>
    <repeatable>true</repeatable>
    <binding>
      <command>nasal</command>
      <script>
      <![CDATA[
        var mod = GetAttack3Mod();
        if (mod == 0)
        {
          controls.slewProp("/sim/current-view/field-of-view", -JsViewZoomVariation);
          CapValueMinMax("/sim/current-view/field-of-view", 1.0, 150.0);
        }
        elsif (mod == 1)
        {
        }
        elsif (mod == 2)
        {
        }
        elsif (mod == 3)
        {
        }
        JsKeyPressed = 1;
      ]]>
      </script>
    </binding>
    <mod-up>
      <binding>
        <command>nasal</command>
        <script>
        <![CDATA[
          JsKeyPressed = 0;
        ]]>
        </script>
      </binding>
    </mod-up>
  </button>

  <!-- Button labeled "9" -->
  <button n="8">
    <desc>Left brake</desc>
    <repeatable>true</repeatable>
    <binding>
      <command>nasal</command>
      <script>
      <![CDATA[
        var mod = GetAttack3Mod();
        if (mod == 0)
        {
          controls.applyBrakes(1, -1);
        }
        elsif (mod == 1)
        {
        }
        elsif (mod == 2)
        {
        }
        elsif (mod == 3)
        {
        }
      ]]>
      </script>
    </binding>
    <mod-up>
      <binding>
        <command>nasal</command>
        <script>
        <![CDATA[
          # Turn brake off independently of the mod if the modified key is released before the brake key.
          controls.applyBrakes(0, -1);
        ]]>
        </script>
      </binding>
    </mod-up>
  </button>

  <!-- Button labeled "10" -->
  <button n="9">
    <desc>Right brake</desc>
    <repeatable>true</repeatable>
    <binding>
      <command>nasal</command>
      <script>
      <![CDATA[
        var mod = GetAttack3Mod();
        if (mod == 0)
        {
          controls.applyBrakes(1, 1);
        }
        elsif (mod == 1)
        {
        }
        elsif (mod == 2)
        {
        }
        elsif (mod == 3)
        {
        }
      ]]>
      </script>
    </binding>
    <mod-up>
      <binding>
        <command>nasal</command>
        <script>
        <![CDATA[
          # Turn brake off independently of the mod if the modified key is released before the brake key.
          controls.applyBrakes(0, 1);
        ]]>
        </script>
      </binding>
    </mod-up>
  </button>

</PropertyList>


